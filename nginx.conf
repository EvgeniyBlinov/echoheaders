events {
    worker_connections 1024;
}

http {
    default_type 'text/plain';
    # maximum allowed size of the client request body. By default this is 1m.
    # Request with bigger bodies nginx will return error code 413.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    client_max_body_size 10m;

    error_log /dev/stdout info;

    server {
        # please check the benefits of reuseport https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1
        # basically instructs to create an individual listening socket for each worker process (using the SO_REUSEPORT
        # socket option), allowing a kernel to distribute incoming connections between worker processes.
        listen 8080 default_server reuseport;

        # Replace '_' with your hostname.
        server_name _;

        location / {
            lua_need_request_body on;
            content_by_lua_block {
                local content = "CLIENT VALUES:\n"
                content = content .. "client_address=" .. tostring(ngx.var.remote_addr) .. "\n"
                content = content .. "command=" ..  tostring(ngx.req.get_method()) .. "\n"
                content = content .. "real path=" ..  tostring(ngx.var.request_uri) .. "\n"
                content = content .. "query=" ..  tostring(ngx.var.query_string) .. "\n"
                content = content .. "request_version=" ..  tostring(ngx.req.http_version()) .. "\n"
                content = content .. "request_uri=" ..  tostring(ngx.var.scheme) .. "://" .. tostring(ngx.var.host) .. ":" .. tostring(ngx.var.server_port) .. tostring(ngx.var.request_uri) .. "\n"
                content = content .. "" .. "\n"

                content = content .. "SERVER VALUES:" .. "\n"
                content = content .. "server_version=" ..  "nginx: " .. tostring(ngx.var.nginx_version) .. " - lua: " .. tostring(ngx.config.ngx_lua_version) .. "\n"
                content = content .. "" .. "\n"

                content = content .. "HEADERS RECEIVED:" .. "\n"
                local headers = ngx.req.get_headers()
                local keys = {}
                for key, val in pairs(headers) do
                    table.insert(keys, key)
                end

                table.sort(keys)
                for i, key in ipairs(keys) do
                    content = content .. key ..  "=" ..  tostring(headers[key]) .. "\n"
                end

                content = content .. "BODY:" .. "\n"

                ngx.say(content)
                ngx.log(ngx.INFO, content)
                ngx.print(ngx.var.request_body or "-no body in request-\n")
            }
        }
    }
}
